#!/usr/bin/env python3

import spidev as sp
import os, sys, typing as t
from termcolor import colored
sys.path.insert(0, "../")
# -- system --
from core.utils import utils
from core.enums import TCOLORS
from radio.sx127x.pinX import pinX
from radio.sx127x.sx127xRegs import sx127xRegs
from radio.sx127x.sx127x import sx127x


VER: str = "2024.01.18.01"


class sxOps(object):

   def __init__(self, spi: sp.SpiDev):
      self.spidev: sp.SpiDev = spi

   # -- cls input --
   @staticmethod
   def cls():
      os.system("clear")

   # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
   # --- GETs / READs --- #

   # -- read reg --
   def get_reg(self, tks: []):
      print("get_reg")

   def get_ver(self, tks: [] = None):
      print("get_ver!")

   # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
   # --- SETs --- #

   # -- set spi vals --
   def set_spi(self, tks: []):
      token_cnt: int = len(tks)
      if token_cnt != 3:
         print(f"WrongArgCount: {token_cnt} | bid, bdev, rst_pin, ss_pin")
         return 1
      # -- -- -- --
      b_id, b_dev, b_hz = [int(tk) for tk in tks]
      print("[ PRE ]")
      print(os.popen(f"spi-config -d /dev/spidev{b_id}.{b_dev} -q").read())
      self.spidev.open(b_id, b_dev)
      self.spidev.max_speed_hz = b_hz
      self.spidev.close()
      print("[ POST ]")
      print(os.popen(f"spi-config -d /dev/spidev{b_id}.{b_dev} -q").read())

   def run_sets(self, tks: []):
      cmd_str: str = f"{tks[0]}_{tks[1]}"
      self._run_cmd(cmd_str, tks[2:])

   def run_gets(self, tks: []):
      cmd_str: str = f"{tks[0]}_{tks[1]}"
      self._run_cmd(cmd_str, tks[2:])

   def run_misc(self, tks: []):
      pass

   # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
   # -- -- runner -- --
   def run(self, tokens: []):
      try:
         # -- -- -- --
         call_type: str = str(tokens[0]).strip().upper()
         if call_type == "SET":
            self.run_sets(tokens)
         elif call_type == "GET":
            self.run_gets(tokens)
         else:
            self.run_misc(tokens)
      except Exception as e:
         utils.log_err(e)
      finally:
         pass

   def _run_cmd(self, call_name, tks: []):
      cmd_object = getattr(self, call_name, None)
      if cmd_object is None:
         print(f"AttrNotFound: {call_name}")
         return 2
      # -- -- -- --
      cmd_call = getattr(self, call_name)
      cmd_call(tks)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# -- cli class --
#
class cli(object):

   def __init__(self):
      self.cmd_hist: [] = []
      self.arrows: [] = ["^[[A", "^[[B"]
      self.rst_pin: int = 0
      self.cs_pin: int = 0
      self.spi_hz: int = 0
      self.bus_id: int = 0
      self.bus_dev: int = 0
      self.bus_hz: int = 0
      self.spidev: sp.SpiDev = t.Any
      self.sxops: sxOps = t.Any

   def init(self):
      _in = input("enter spi info -> rst_pin cs_pin bus_id bus_dev bus_hz: ")
      _args: [] = [a.strip() for a in _in.split(" ")]
      if len(_args) != 5:
         raise RuntimeError("BadInput")
      # -- -- -- --
      rst_pin, cs_pin, bid, bdev, bhz = _args
      self.rst_pin = int(rst_pin)
      self.cs_pin = int(cs_pin)
      self.bus_id = int(bid)
      self.bus_dev = int(bdev)
      self.bus_hz = int(bhz)
      self.spidev = sp.SpiDev()
      self.spidev.open(self.bus_id, self.bus_dev)
      self.spidev.max_speed_hz = self.bus_hz
      self.spidev.close()
      _cmd: str = f"spi-config -d /dev/spidev{self.bus_id}.{self.bus_dev} -q"
      print(os.popen(_cmd).read())

   def run_cmd(self, buff: str):
      if buff == "!q":
         print("\n[ !q : exit ]\n")
         exit(0)
      # -- misc/ cls --
      if buff in ["cls"]:
         sxOps.cls()
         return
      # -- make toks --
      toks: [] = [arg.strip() for arg in buff.split(" ")]
      # -- check spi --
      if self.spidev == t.Any:
        self.init()
        self.sxops = sxOps(spi=self.spidev)
      else:
         # -- run command --
         self.sxops or sxOps(spi=self.spidev)
         print(colored(f">> {buff} <<", color=TCOLORS.green.name))
         self.sxops.run(tokens=toks)

   def main(self):
      def __loop_tick():
         try:
            msg: str = f"\n[ sxcli | ver.: {VER} ]\n"
            print(colored(msg, color=TCOLORS.light_blue.name))
            _input = input("xscli: ").strip()
            if _input in self.arrows:
               return
            # -- --
            self.run_cmd(_input)
         except Exception as e:
            print(e)
      # -- -- -- --
      while True:
        __loop_tick()


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# -- -- entry point -- --
if __name__ == "__main__":
   _cli: cli = cli()
   _cli.main()
