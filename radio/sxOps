#!/usr/bin/env python3

import os, sys, typing as t
from termcolor import colored
import spidev as sp
sys.path.insert(0, "../")
# -- system --
from core.utils import utils
from core.enums import TCOLORS
from radio.sx127x.sx127xRegs import sx127xRegs
from radio.sx127x.sx127x import sx127x


VER: str = "2024.01.18.01"


class sxOps(object):

   def __init__(self):

      self._sx127x: sx127x = sx127x(spi=self.lora_spi, rst_pin=0, cs_pin=0)

   # -- cls input --
   def cls(self, tks: [] = None):
      os.system("clear")

   # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
   # --- GETs / READs --- #

   # -- read reg --
   def read_reg(self):
      print("read_reg")

   def get_ver(self):
      pass

   # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
   # --- SETs --- #

   # -- set spi vals --
   def set_spi(self, tks: []):
      token_cnt: int = len(tks)
      if token_cnt != 3:
         print(f"WrongArgCount: {token_cnt} | bid, bdev, rst_pin, ss_pin")
         return 1
      # -- -- -- --
      bid, bdev, bhz = tks
      # self.lora_spi \
      #    = loraSPI(bus=int(bid), bus_dev=int(bdev), bus_hz=int(bhz))
      # self.lora_spi.init()
      print(f"SPI.init: {self.lora_spi.init_code}")
      b, d = self.lora_spi.bus, self.lora_spi.bus_dev
      buff = os.popen(f"spi-config -d /dev/spidev{b}.{d} -q").read()
      print(buff)

   def run_sets(self, tks: []):
      pass

   def run_gets(self, tks: []):
      pass

   # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
   # -- -- runner -- --
   def run(self, tokens: []):
      try:
         # -- -- -- --
         cmd_call_name: str = str(tokens[0]).strip().upper()
         if cmd_call_name == "SET":
            self.run_sets(tokens)
         elif cmd_call_name == "GET":
            self.run_gets(tokens)
         else:
            pass
         # -- -- -- --
         cmd_object = getattr(self, cmd_call_name, None)
         if cmd_object is None:
            print(f"AttrNotFound: {cmd_call_name}")
            return 2
         # -- -- -- --
         cmd_call = getattr(self, cmd_call_name)
         cmd_call(tokens[1:])
      except Exception as e:
         utils.log_err(e)
      finally:
         pass


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# -- cli class --
#
class cli(object):

   def __init__(self):
      self.cmd_hist: [] = []
      self.arrows: [] = ["^[[A", "^[[B"]
      self.rst_pin: int = 0
      self.cs_pin: int = 0
      self.spi_hz: int = 0
      self.spidev: sp.SpiDev = sp.SpiDev()
      self.sxops: sxOps = sxOps()

   def run_cmd(self, buff: str):
      if buff == "!q":
         print("\n[ !q : exit ]\n")
         exit(0)
      # -- check spi --
      if self.rst_pin == 0 or self.cs_pin == 0 or self.spi_hz == 0:
         print("you must setup spi buss info")
         return
      # -- run command --
      print(colored(f">> {buff} <<", color=TCOLORS.green.name))
      self.sxops.run([arg.strip() for arg in buff.split(" ")])

   def main(self):
      # -- -- -- --
      def __loop_tick():
         try:
            msg: str = f"\n[ sxcli | ver.: {VER} ]\n"
            print(colored(msg, color=TCOLORS.light_blue.name))
            _input = input("xscli: ").strip()
            if _input in self.arrows:
               return
            # -- -- -- --
            self.run_cmd(_input)
         except Exception as e:
            print(e)
      # -- -- -- --
      while True:
        __loop_tick()
      # -- -- -- --


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# -- -- entry point -- --
if __name__ == "__main__":
   _cli: cli = cli()
   _cli.main()
