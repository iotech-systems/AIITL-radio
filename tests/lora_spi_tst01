#!/usr/bin/env python3

import os, sys, time
# pp = os.environ.get("PYTHONPATH")
# print(f"pp: {pp}")
from radio.sx127x.sx127xConsts import sx127xConsts as consts
from radio.sx127x.loraSPI import loraSPI
from radio.sx127x.sx127x import sx127x

thispy, _bid, _bdev, _hz = sys.argv
print(f"\n[{thispy}]\n")

b_id: int = int(_bid)
b_dev: int = int(_bdev)
b_hz: int = int(_hz)

loraspi: loraSPI = loraSPI(bus=b_id, bus_dev=b_dev, bus_hz=b_hz)
print(dir(loraspi))

radio: sx127x = sx127x(spi=loraspi, rst_pin=22, cs_pin=8)
radio.reset()
v: str = radio.chip_ver()
print(f"v: {v}")
# -- init --
begin_rval: bool = radio.begin()
print(begin_rval)

# Set frequency to 915 Mhz
frq: int = 433
print(f"Set frequency to {frq} Mhz")
radio.setFrequency(frq * 1000000)

# Set TX power, this function will set PA config with optimal setting for requested TX power
print("Set TX power to +17 dBm")
radio.setTxPower(17, consts.TX_POWER_PA_BOOST)  # TX power +17 dBm using PA boost pin

# Configure modulation parameter including spreading factor (SF), bandwidth (BW), and coding rate (CR)
# Receiver must have same SF and BW setting with transmitter to be able to receive LoRa packet
print("Set modulation parameters:\n\tSpreading factor = 7\n\tBandwidth = 125 kHz\n\tCoding rate = 4/5")
radio.setSpreadingFactor(7)     # LoRa spreading factor: 7
radio.setBandwidth(125000)      # Bandwidth: 125 kHz
radio.setCodeRate(5)            # Coding rate: 4/5

# print("Set packet parameters:\n\tExplicit header type\
#    \n\tPreamble length = 12\n\tPayload Length = 15\n\tCRC on")

radio.setHeaderType(consts.HEADER_EXPLICIT)     # Explicit header mode
radio.setPreambleLength(12)                     # Set preamble length to 12
radio.setPayloadLength(15)                      # Initialize payloadLength to 15
radio.setCrcEnable(True)                        # Set CRC enable

# Set syncronize word for public network (0x34)
print("Set syncronize word to 0x34")
radio.setSyncWord(0x34)

print("\n-- LoRa Transmitter --\n")

# Message to transmit
message = "HeLoRa World!\0"
messageList = list(message)
for i in range(len(messageList)):
   messageList[i] = ord(messageList[i])
counter = 0

# Transmit message continuously
while True:
    # Transmit message and counter
    # write() method must be placed between beginPacket() and endPacket()
    radio.beginPacket()
    radio.write(messageList, len(messageList))
    radio.write([counter], 1)
    radio.endPacket(timeout=2)
    # Print message and counter
    print(f"{message}  {counter}")
    # Wait until modulation process for transmitting packet finish
    radio.wait(timeout=2)
    # Print transmit time and data rate
    print("Transmit time: {0:0.2f} ms | Data rate: {1:0.2f} byte/s"
          .format(radio.transmitTime(), radio.dataRate()))
    # Don't load RF module with continous transmit
    time.sleep(5)
    counter = (counter + 1) % 256
